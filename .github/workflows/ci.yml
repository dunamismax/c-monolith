name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  # Build and test on multiple platforms
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        mode: [debug, release]
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: macos-latest
            cc: clang
            cxx: clang++

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential valgrind cppcheck

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install cppcheck if available
        brew install cppcheck || true

    - name: Set up environment
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    - name: Create build directories
      run: |
        mkdir -p build/bin build/obj build/lib

    - name: Build libraries
      run: |
        echo "Building libraries..."
        make libs MODE=${{ matrix.mode }}

    - name: Build applications
      run: |
        echo "Building applications..."
        make apps MODE=${{ matrix.mode }}

    - name: Run basic tests
      run: |
        echo "Running tests..."
        chmod +x scripts/test.sh
        ./scripts/test.sh --quick

    - name: Test executables exist
      run: |
        echo "Checking if executables were built..."
        ls -la build/bin/
        test -f build/bin/calculator
        test -f build/bin/file_utils
        test -f build/bin/text_processor
        test -f build/bin/tic_tac_toe
        test -f build/bin/number_guessing

    - name: Test executable permissions
      run: |
        echo "Checking executable permissions..."
        test -x build/bin/calculator
        test -x build/bin/file_utils
        test -x build/bin/text_processor
        test -x build/bin/tic_tac_toe
        test -x build/bin/number_guessing

    - name: Run memory leak tests (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.mode == 'debug'
      run: |
        echo "Running memory leak tests with valgrind..."
        echo "help\nquit" | timeout 10 valgrind --leak-check=full --error-exitcode=1 build/bin/calculator || true

    - name: Run static analysis
      if: matrix.mode == 'debug'
      run: |
        echo "Running static analysis..."
        if command -v cppcheck &> /dev/null; then
          cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem libs/ apps/ || true
        else
          echo "cppcheck not available, skipping static analysis"
        fi

    - name: Test clean functionality
      run: |
        echo "Testing clean functionality..."
        make clean
        test ! -f build/bin/calculator || test ! -s build/bin/calculator

    - name: Rebuild after clean
      run: |
        echo "Testing rebuild after clean..."
        make all MODE=${{ matrix.mode }}

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}-${{ matrix.mode }}
        path: |
          build/bin/
          build/lib/
        retention-days: 7

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy

    - name: Run cppcheck
      run: |
        echo "Running cppcheck analysis..."
        cppcheck --enable=all --xml --xml-version=2 libs/ apps/ 2> cppcheck-report.xml || true

    - name: Run clang-tidy (if available)
      run: |
        echo "Running clang-tidy analysis..."
        if command -v clang-tidy &> /dev/null; then
          find libs/ apps/ -name "*.c" | xargs clang-tidy || true
        fi

    - name: Check code formatting
      run: |
        echo "Checking for common formatting issues..."
        # Check for tabs vs spaces consistency
        if grep -r $'\t' libs/ apps/ --include="*.c" --include="*.h"; then
          echo "Warning: Found tab characters in source files"
        fi
        
        # Check for trailing whitespace
        if grep -r '[[:space:]]$' libs/ apps/ --include="*.c" --include="*.h"; then
          echo "Warning: Found trailing whitespace in source files"
        fi

  # Documentation and examples
  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build project
      run: |
        make all MODE=release

    - name: Test build scripts
      run: |
        chmod +x scripts/*.sh
        ./scripts/build.sh --help
        ./scripts/test.sh --help
        ./scripts/clean.sh --help

    - name: Generate documentation
      run: |
        echo "Generating API documentation..."
        # If doxygen is available, generate docs
        if command -v doxygen &> /dev/null; then
          echo "Doxygen available for documentation generation"
        else
          echo "Documentation tools not available"
        fi

    - name: Validate README
      run: |
        echo "Validating README and documentation..."
        test -f README.md
        test -s README.md

  # Security scanning
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security checks
      run: |
        echo "Running basic security checks..."
        
        # Check for common security issues in C code
        echo "Checking for unsafe functions..."
        if grep -r "gets\|strcpy\|strcat\|sprintf" libs/ apps/ --include="*.c"; then
          echo "Warning: Found potentially unsafe functions"
        fi
        
        # Check for hardcoded secrets (basic check)
        echo "Checking for potential secrets..."
        if grep -ri "password\|secret\|key\|token" libs/ apps/ --include="*.c" --include="*.h"; then
          echo "Warning: Found potential hardcoded secrets"
        fi

  # Release build (only on main branch)
  release:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-test, code-quality]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build release version
      run: |
        make all MODE=release

    - name: Create release package
      run: |
        echo "Creating release package..."
        mkdir -p release
        cp -r build/bin/* release/
        tar -czf c-monorepo-release.tar.gz release/

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: c-monorepo-release.tar.gz
        retention-days: 30